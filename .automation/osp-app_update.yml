- name: Check if local repo is out-of-date
  block:
    - name: Check local repo
      shell: git remote update > /dev/null && git status -uno | sed -n 2p
      register: shell_result
    - set_fact: 
        out_of_date: yes
        when: shell_result.stdout != "Your branch is up to date with 'origin/master'."
    - name: Update notif - "Check update" successful
      lineinfile:
        path: "{{ rocketchat_message }}"
        line: ":white_check_mark: _Check update_ successful. Out of date ? : *{{ out_of_date }}*"
    - fail:
        msg: osp-app up to date
      when: not out_of_date
# Check available space on disk: does the server have enough space?
# A Check app size
# B Check if space on disk is at least twice the app size
# C Store enough_space var if B is true
# if no:
# 3.1 Rocket notification: Server full
# if yes:
- name: Check disk size
  block:
    - name: Check available disk space
      shell: df -m "{{ osp_app_directory }}" | tail -1 | awk '{print $4}'
      register: shell_result
    - set_fact: 
        available_space: shell_result.stdout
    - name: Check app size
      shell: du -sm "{{ osp_app_directory }}" | cut -f1
      register: shell_result
    - set_fact:
        space_needed: "{{ shell_result.stdout|int * app_space_multiplier }}"
    - set_fact:
        enough_space: yes
        when: available_space|int > space_needed
    - name: Update notif - "Check disk size" successful
      lineinfile:
        path: "{{ rocketchat_message }}"
        line: ":white_check_mark: _Check disk size_ successful - Enough space ? *{{ enough_space }}*" 
    - fail:
        msg: Server full
      when:  not enough_space
# Ruby version: Is the ruby version up-to-date?
# A Check current ruby-version
# B Check .ruby-version
# C Store ruby_compatible if B is true
# if no:
# 4.1 Rocket notification: Ruby needs update
# if yes:
- name: Check ruby version
  block:
    - name: Check local ruby version
      shell: rbenv local
      register: shell_result
    - set_fact:
        local_ruby_version: shell_result.stdout
    - name: Check remote ruby
      shell: curl -L $(git remote -v | tail -1 | awk '{print $2}' | rev | cut -c5- |rev)/raw/master/.ruby-version
      register: shell_result
      args:
        warn: false
    - set_fact:
        remote_ruby_version: shell_result.stdout
    - set_fact:
        ruby_compatible: yes
        when: remote_ruby_version == local_ruby_version
    - name: Update notif - "Check ruby version" successful
      lineinfile:
        path: "{{ rocketchat_message }}"
        line: ":white_check_mark: _Check ruby version_ successful - Ruby compatible ? *{{ ruby_compatible }}*" 
    - fail: 
        msg : Ruby not compatible
      when: not ruby_compatible 
# if out_of_date and enough_space and ruby_compatible
- name: Do update
  block:
# Backup DB in pg_dump folder
  - name: Update notif - Begin update
    lineinfile:
      path: "{{ rocketchat_message }}"
      line: "Begin update" 
  - name: Backup osp-app database in pg_dump folder
    postgresql_db:
      name: osp_app
      state: dump
      target: home/mako/pg_dump/osp_app-$(date +%Y%m%d%H%M%S).sql
 # Backup APP in osp_app.bak folder
  - name: Backup osp-app database in pg_dump folder
    copy:
      src: "{{ osp_app_directory }}"
      dest: /home/mako/osp-app.bkp
 # Git pull
  - name: Git pull last commits
    git:
      repo: git@github.com:OpenSourcePolitics/osp-app.git
      dest: "{{ osp_app_directory }}"
      version: 0.21-stable
 # bundle installation
  - name: Bundle install
    bundler:
      state: present
      chdir: "{{ osp_app_directory }}"
 # Migration
  - name: Run migrations
    shell:
      cmd: bundle exec rails db:migrate
      chdir: "{{ osp_app_directory }}"
 # Assets clobber / Assets precompile
  - name: Precompile assets
    shell:
      cmd: RAILS_ENV=production bundle exec rails tmp:cache:clear assets:clobber assets:precompile
      chdir: "{{ osp_app_directory }}"
 # Restart nginx + sidekiq
  - name: Restart sidekiq
    service:
      name: sidekiq
      state: restarted
  - name: Restart nginx
    service:
      name: nginx
      state: restarted
 # curl homepage
  - name: Check osp-app homepage
    uri:
      url: "{{ osp-app-url }}"
  - name: Update notif - End update
    lineinfile:
      path: "{{ rocketchat_message }}"
      line: ":white_check_mark: Update successful" 

